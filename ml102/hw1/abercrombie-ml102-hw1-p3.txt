
R version 2.13.2 (2011-09-30)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Machine Learning 102 - Unsupervised - Hacker Dojo
> # http://machinelearning102.pbworks.com/w/page/32890352/FrontPage
> #
> # Homework #1, Basic clustering
> # Dave Abercrombie, October 24 2011
> #
> # http://machinelearning102.pbworks.com/w/file/37958115/ML102Homework02.pdf
> # http://archive.ics.uci.edu/ml/datasets/Synthetic+Control+Chart+Time+Series
> #
> # Problem 3 of 4
> #
> 
> #####################################################################
> # Step 1. Import data
> 
> # see if stuff is lying around
> ls()
 [1] "control.chart.raw.agnes"              
 [2] "control.chart.raw.agnes.clusters.df"  
 [3] "control.chart.raw.agnes.cuts"         
 [4] "control.chart.raw.agnes.hc"           
 [5] "control.chart.raw.df"                 
 [6] "control.chart.stand.agnes"            
 [7] "control.chart.stand.agnes.clusters.df"
 [8] "control.chart.stand.agnes.cuts"       
 [9] "control.chart.stand.agnes.hc"         
[10] "control.chart.type.factors"           
> 
> 
> setwd("/Users/dabercrombie/Documents/aberdave-repos/Machine-Learning/ml102/hw1")
> 
> control.chart.raw.df <- read.table(
+   file="synthetic_control.data",
+   header=FALSE,
+ )
> 
> # Interactive look at structure
> str(control.chart.raw.df)
'data.frame':	600 obs. of  60 variables:
 $ V1 : num  28.8 24.9 31.4 25.8 27.2 ...
 $ V2 : num  34.5 25.7 30.6 30.5 29.2 ...
 $ V3 : num  31.3 27.6 26.4 35.4 33.7 ...
 $ V4 : num  31.3 32.8 24.3 25.6 25.6 ...
 $ V5 : num  28.9 27.9 27.9 28 24.7 ...
 $ V6 : num  33.8 31.6 28.5 25.3 28.9 ...
 $ V7 : num  25.4 31.5 25 28.1 35.8 ...
 $ V8 : num  27.8 35.5 32.4 29.4 34.9 ...
 $ V9 : num  35.2 28 25.2 31.5 24.6 ...
 $ V10: num  27.1 31.7 27.3 27.3 34.2 ...
 $ V11: num  32.9 27.5 31.8 29 28 ...
 $ V12: num  29.2 31.2 27.3 29 25.3 ...
 $ V13: num  36 27.5 28.3 30 35.4 ...
 $ V14: num  32.3 31.4 26.6 30.3 34.9 ...
 $ V15: num  34.5 27.8 24 30.4 25.1 ...
 $ V16: num  32.9 24.5 35.1 24.3 29.5 ...
 $ V17: num  34.1 27.6 31.6 24.3 33.2 ...
 $ V18: num  26.5 35.6 32.6 35.1 31.1 ...
 $ V19: num  27.7 35.4 31 25.4 31.4 ...
 $ V20: num  26.4 31.4 34.1 32.1 26.5 ...
 $ V21: num  25.8 30.7 26.9 33.3 28.6 ...
 $ V22: num  29.3 24.1 31.5 25 31.7 ...
 $ V23: num  30.7 35.1 35 35.3 35.9 ...
 $ V24: num  29.5 30.5 32.4 31.6 33 ...
 $ V25: num  33 32 24.3 29.3 24.6 ...
 $ V26: num  25 33.7 30.2 34.2 33.2 ...
 $ V27: num  28.9 25.6 31.2 26.5 27.4 ...
 $ V28: num  24.3 30.5 26.7 32.2 32.6 ...
 $ V29: num  26.1 33.6 31.5 25.5 35.9 ...
 $ V30: num  34.9 25.1 28.9 24.8 28 ...
 $ V31: num  25 34.1 27.3 27.6 33.1 ...
 $ V32: num  26.6 32.6 24.2 28.4 33.4 ...
 $ V33: num  35.7 28.3 27 32.4 26.9 ...
 $ V34: num  28.4 26.1 25.3 27 30.2 ...
 $ V35: num  29.1 26.9 31.6 35.9 29.7 ...
 $ V36: num  28.2 31.5 24.7 35.1 30.9 ...
 $ V37: num  26.2 33.1 27.5 24.4 24.5 ...
 $ V38: num  33.3 24.1 24.2 27.6 34 ...
 $ V39: num  31 28.5 26.8 27.8 33.3 ...
 $ V40: num  27 25.8 35.1 29.9 33.2 ...
 $ V41: num  35.5 36 32.6 32.4 31.3 ...
 $ V42: num  26.2 26.5 31.1 26.9 27.9 ...
 $ V43: num  29 24.9 26.4 31.3 35.1 ...
 $ V44: num  32 26 28.1 29.4 35.1 ...
 $ V45: num  31.1 32.8 31.4 34.3 33.8 ...
 $ V46: num  34.3 28.5 27.3 24.7 25.9 ...
 $ V47: num  28.1 26.3 29.6 35.8 29.1 ...
 $ V48: num  28.9 30.6 36 31.9 24.3 ...
 $ V49: num  35.5 29 34.1 34.2 32.3 ...
 $ V50: num  29.7 29.4 27.2 31.2 34.9 ...
 $ V51: num  31.4 32.6 33.6 34.6 27.7 ...
 $ V52: num  24.6 31 26.6 28.7 28 ...
 $ V53: num  33.7 26.6 25.5 28.3 35.7 ...
 $ V54: num  25 28.4 32.5 31.6 27.6 ...
 $ V55: num  34.9 33.7 25.6 34.6 35.3 ...
 $ V56: num  35 26.4 30 32.5 30 ...
 $ V57: num  32.5 28.5 31.4 31 34.2 ...
 $ V58: num  33.4 34.2 33.9 24.9 33.1 ...
 $ V59: num  25.5 32.1 29.5 27.4 31.1 ...
 $ V60: num  25.9 26.7 29.3 25.3 31 ...
> # tail(control.chart.raw.df)
> dim(control.chart.raw.df)
[1] 600  60
> 
> 
> #####################################################################
> # Step 2. Do agnes on raw dataset
> 
> require(cluster)
Loading required package: cluster
> 
> 
> # do not standardize, yet (that comes later)
> control.chart.raw.agnes <- agnes(
+   x=control.chart.raw.df, 
+   stand=FALSE
+ )
> 
> str(control.chart.raw.agnes)
List of 8
 $ order : int [1:600] 1 20 73 33 29 52 64 59 40 50 ...
 $ height: num [1:599] 31.4 28.1 34.6 35.9 30.5 ...
 $ ac    : num 0.745
 $ merge : int [1:599, 1:2] -368 -308 -20 -55 -34 -57 -42 -344 -30 -61 ...
 $ diss  : NULL
 $ call  : language agnes(x = control.chart.raw.df, stand = FALSE)
 $ method: chr "average"
 $ data  : num [1:600, 1:60] 28.8 24.9 31.4 25.8 27.2 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:60] "V1" "V2" "V3" "V4" ...
 - attr(*, "class")= chr [1:2] "agnes" "twins"
> # summary(control.chart.raw.agnes)
> 
> plot(
+   x=control.chart.raw.agnes,
+   ask=FALSE,
+   which.plots=2
+ )
> 
> 
> #####################################################################
> # Step 4. Extract and review agnes clusters of unscaled dataset
> #
> # see also Cookbook 13.6 Finding Clusters in Your Data
> # a) cast to hclust with as.hclust()
> # b) extract clusters with cutree()
> # c) create factors for use with lattice histogram()
> 
> # 4a) convert agnes object to an hclust object
> #
> control.chart.raw.agnes.hc <- as.hclust(control.chart.raw.agnes)
> 
> # 4) We know from the dataset description that we hope for six clusters,
> # so I use k=6 here.
> #
> control.chart.raw.agnes.cuts <- cutree(
+   tree=control.chart.raw.agnes.hc,
+   k=6
+ )
> 
> # cutree() returns a vector of cluster assignments, index by obsersvation
> #
> str(control.chart.raw.agnes.cuts)
 int [1:600] 1 1 1 1 1 1 1 1 1 1 ...
> 
>  
> # 4C) create factors for use with lattice histogram()
> # We know that the data had six types of control charts, with 100 examples 
> # of each, in contiguous chunks of rows
> # See http://archive.ics.uci.edu/ml/databases/synthetic_control/synthetic_control.data.html
> # So lets create some factors and attach them to cluster assingment as a data frame
> #
> control.chart.type.factors <- as.factor(
+   c(
+     rep('1. Normal',100),
+     rep('2. Cyclic',100),
+     rep('3. Increasing trend',100),
+     rep('4. Decreasing trend',100),
+     rep('5. Upward shift',100),
+     rep('6. Downward shift',100)
+   )
+ )
> str(control.chart.type.factors)
 Factor w/ 6 levels "1. Normal","2. Cyclic",..: 1 1 1 1 1 1 1 1 1 1 ...
> 
> control.chart.raw.agnes.clusters.df <- data.frame(
+   actual.type=control.chart.type.factors,
+   modeled.cluster=control.chart.raw.agnes.cuts
+ )
> str(control.chart.raw.agnes.clusters.df)
'data.frame':	600 obs. of  2 variables:
 $ actual.type    : Factor w/ 6 levels "1. Normal","2. Cyclic",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ modeled.cluster: int  1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> # 4d) do lattice histogram. 
> # 
> # Lattice graphics includes methods to put many histograms on 
> # the same chart. It is installed by default, but not loaded
> # by default.
> #
> require('lattice')
Loading required package: lattice
> 
> 
> # The first argument is a "model formula" 
> # in "Wilkinon-Rogers (1973)" notation (see Venables-Ripley chap. 6)
> # Think of it as saying that the modeled.cluster values depend on the
> # control.chart.raw.clusters.
> # The third argument. layout, and is poorly documented. I learned this
> # trick from "R in a Nutshell" Figure 15-12.
> #
> histogram(
+   main="agnes clusters on raw data",
+   ~modeled.cluster|actual.type, 
+   data=control.chart.raw.agnes.clusters.df,
+   layout=c(1,6)
+ )
> 
> # Use student Jason's simple visualization, made possible since input dataset
> # was organized in groups of 100.
> plot(
+   control.chart.raw.agnes.cuts,
+   main="agnes clusters on raw data",
+   xlab="Obesrvation index: 1-100=normal, 101-200=cyclic, etc.",
+   ylab="modeled cluster assigmment"
+ )
> 
> 
> 
> 
> 
> 
> 
> 
> #####################################################################
> # Step 5. Do agnes on scaled dataset using same steps
> 
> # now we standardize
> control.chart.stand.agnes <- agnes(
+   x=control.chart.raw.df, 
+   stand=TRUE
+ )
> 
> # summary(control.chart.stand.agnes)
> 
> plot(
+   x=control.chart.stand.agnes,
+   ask=FALSE,
+   which.plots=2
+ )
> 
> control.chart.stand.agnes.hc <- as.hclust(control.chart.stand.agnes)
> 
> # 4) We know from the dataset description that we hope for six clusters,
> # so I use k=6 here.
> #
> control.chart.stand.agnes.cuts <- cutree(
+   tree=control.chart.stand.agnes.hc,
+   k=6
+ )
> 
> control.chart.stand.agnes.clusters.df <- data.frame(
+   actual.type=control.chart.type.factors,
+   modeled.cluster=control.chart.stand.agnes.cuts
+ )
> str(control.chart.stand.agnes.clusters.df)
'data.frame':	600 obs. of  2 variables:
 $ actual.type    : Factor w/ 6 levels "1. Normal","2. Cyclic",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ modeled.cluster: int  1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> # 4d) do lattice histogram. 
> # 
> # Lattice graphics includes methods to put many histograms on 
> # the same chart. It is installed by default, but not loaded
> # by default.
> #
> require('lattice')
> 
> 
> # The first argument is a "model formula" 
> # in "Wilkinon-Rogers (1973)" notation (see Venables-Ripley chap. 6)
> # Think of it as saying that the modeled.cluster values depend on the
> # control.chart.raw.clusters.
> # The third argument. layout, and is poorly documented. I learned this
> # trick from "R in a Nutshell" Figure 15-12.
> #
> histogram(
+   main="agnes clusters on standardized data",
+   ~modeled.cluster|actual.type, 
+   data=control.chart.stand.agnes.clusters.df,
+   layout=c(1,6)
+ )
> 
> # Use student Jason's simple visualization, made possible since input dataset
> # was organized in groups of 100.
> plot(
+   control.chart.stand.agnes.cuts,
+   main="agnes clusters on standardized data",
+   xlab="Obesrvation index: 1-100=normal, 101-200=cyclic, etc.",
+   ylab="modeled cluster assigmment"
+ )
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  1.248   0.021   1.264 
