
R version 2.13.2 (2011-09-30)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Machine Learning 102 - Unsupervised - Hacker Dojo
> # http://machinelearning102.pbworks.com/w/page/32890352/FrontPage
> #
> # Homework #4, Detecting Anomalies
> # Dave Abercrombie, November 16 2011
> #
> # Part 2: look for anomalies in synthetic data from part 1.
> #
> #######################################################
> # 1. Read the CSV generated by Part 1, peek at it
> 
> ls()
character(0)
> setwd("/Users/dabercrombie/Documents/aberdave-repos/Machine-Learning/ml102/hw4")
> 
> synthetic.data <- read.csv(
+     file="synthetic.data.csv"
+ )
> str(synthetic.data)
'data.frame':	1000 obs. of  11 variables:
 $ p1 : int  115 110 100 115 105 120 115 120 120 120 ...
 $ p2 : int  150 100 120 90 95 85 120 125 95 90 ...
 $ p3 : int  130 90 105 85 130 95 130 135 110 90 ...
 $ p4 : int  130 120 130 155 130 135 140 160 95 105 ...
 $ p5 : int  110 130 125 130 90 115 145 115 95 110 ...
 $ p6 : int  145 150 150 135 125 120 165 125 100 95 ...
 $ p7 : int  85 105 125 85 100 115 150 165 115 95 ...
 $ p8 : int  140 110 140 85 90 135 125 115 115 95 ...
 $ p9 : int  95 145 95 85 120 135 95 140 120 120 ...
 $ p10: int  110 70 115 95 105 85 80 145 130 115 ...
 $ r1 : int  32 40 14 32 38 17 12 17 26 14 ...
> 
> # note the two types of anomalies in the last 20 rows 
> tail(x=synthetic.data, n=40)
      p1  p2  p3  p4  p5  p6  p7  p8  p9 p10  r1
961  115  90 125 100  60  85 145  90 105  90  10
962   50  70  85  90  35  55  25  40  45  45  23
963  135 140 160 140 135 130 135 140 140 130  16
964   80  60  80  65  85 105  90 100  80  85   0
965  120 110 110 120 100  90  90  65 100 140  10
966   75 115 110  85  80 110  90  75 100  55  13
967  150 115 115 100 120 120 100 115 135 125  14
968   90  85  95  85 120 145 135  90 115  95  12
969  120 140 110 130 115 105 120  95 135 130  28
970   95 155 125 105 110 135 155  85 130 105  10
971   60  65  50  70  65  80  55  55  40 110  30
972  130 120 120 130 130 135 115 120  95  85   7
973   60  55  40  80  85  50  75  70  75 110  13
974  165 135 145 130 140 150 110 150 120 125  21
975  110 150  80  70  75  80 105  95 120 100   2
976  100  90 115 115 100  95  95 105 115 130  30
977   60  80  95  70  70  70  60 100  90  55   4
978   95  90  65  80  75  65  85 100  75 100  20
979  115 120 125 100 105 110 110 105 100 130   9
980   80  75 115 100  95  95 110  85 100  75  23
981   10  10  10  10  10  10  10  10  10  10 200
982   10  10  10  10  10  10  10  10  10  10 300
983   10  10  10  10  10  10  10  10  10  10 100
984   10  10  10  10  10  10  10  10  10  10 200
985   10  10  10  10  10  10  10  10  10  10 300
986   20  20  20  20  20  20  20  20  20  20 200
987   20  20  20  20  20  20  20  20  20  20 300
988   20  20  20  20  20  20  20  20  20  20 300
989   20  20  20  20  20  20  20  20  20  20 100
990   20  20  20  20  20  20  20  20  20  20 300
991    5   5  10  10  20  40  80 160 320 640 100
992    5   5  10  20  30  50  90 170 330 650  90
993    5  10  20  30  40  60 100 180 340 660  80
994   10  20  30  40  50  70 110 190 350 670  70
995   20  30  40  50  60  80 120 200 360 680  60
996    5   5  10  10  20  40  80 160 320 640 100
997    5   5  10  20  30  50  90 170 330 650  90
998    5  10  20  30  40  60 100 180 340 660  80
999   10  20  30  40  50  70 110 190 350 670  70
1000  20  30  40  50  60  80 120 200 360 680  60
> 
> # define two contiguous index ranges, one for typical
> # and one for anomalous data
> #
> range.typical <- 1:980
> range.anomaly <- 981:1000
> 
> # derive lengths of typcal and anomaly data
> count.typical <- length(range.typical)
> count.anomaly <- length(range.anomaly)
> 
> 
> 
> #######################################################
> # 2. use e1071 to make an SVM one-class model
> 
> require("e1071")
Loading required package: e1071
Loading required package: class
> 
> # Generate model and extract training data predictions
> synthetic.data.svm <- svm(
+   x=synthetic.data,
+   type="one-classification",
+   # gamma = 0.1, 
+   cost = 1,
+   nu = 0.08
+ )
> svm.model.predictions <- fitted(synthetic.data.svm)
> 
> # Since "typical" and anomaly data are each contiguous,
> # we expect two thick strainght lines. Points by themselves
> # along these lines are prediction errors
> #
> plot(svm.model.predictions,
+      main="SVM one-class training predictions",
+      sub="perfection would be two lines, no stray points"
+ )
> 
> # Anomalies should be flagged FALSE, so the sum of TRUE values
> # is the count of incorrect anomaly predictions
> #
> misclassified.anomaly.count <- sum(svm.model.predictions[range.anomaly])
> 
> # Typical data should be flagged TRUE, so the sum of TRUE values
> # is the count of correct "typical" predictions. To get the count
> # of errors, we subtract this from the count of all typcal data
> #
> misclassified.typical.count <- count.typical - sum(svm.model.predictions[range.typical])
> 
> # How many errors did we make?
> list(
+     misclassified.anomaly.count=misclassified.anomaly.count, 
+     misclassified.typical.count=misclassified.typical.count
+ )
$misclassified.anomaly.count
[1] 0

$misclassified.typical.count
[1] 58

> 
> # nu=0.08 and default gamma provide perfect detection of anomalies, with
> # about a 6% error rate with typical data
> 
> proc.time()
   user  system elapsed 
  0.324   0.021   0.472 
